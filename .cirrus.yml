env: 
    CIRRUS_CLONE_DEPTH: 1 
    CIRRUS_WORKING_DIR: "/tmp/ci" # Where to clone the aosp-builder repo

    # For rclone with google drive or any cloud! After first commit pushing, login to https://cirrus-ci.com , click top left corner 3 dot menu, click repository(yourname/aosp-builder) > Repository Settings > Secured Variables > enter content of ~/.config/rclone/rclone.conf (from pc where you setup rclone) > ENCRYPT, copy that ENCRYPTED hash
    # ENCRYPTED variables is unique for every repository, so you cant use my one, create you rclone config https://rclone.org/drive/#making-your-own-client-id
    rclone_config: "ENCRYPTED[98d10e4c14ce2b2c3b572de6a40c09482a5c066ca1fb530ba255f60284bf562fb5ac252767931cca207ef839b1a569fe]"
    bot_api: "ENCRYPTED[0f11b06d3baae4a42bacd689bc709072d4626f2783c2f7275a7f1920f5ca3d51728a5750d82192f073a7208ad6f0e9f8]"
    manifest: "https://github.com/Evolution-X/manifest"
    branch: "tiramisu"
    local: "https://github.com/galang8664/local_manifest"
    localbranch: "evoxr"
    
task:
    name: aosp # Project name
    skip: $CIRRUS_BRANCH == 'main'
    only_if: $CIRRUS_REPO_OWNER == 'galang8664'
    timeout_in: 120m # Otherwise it will timeout at 60m automatically, 120m highest in free account
    persistent_worker:
      labels:
        name: lang
    container:
      image: apon77/aosp:latest # It has built-in setup environment + repo, aria2, rclone, pigz, username ci, and email ci@ci.ci [You can use your own docker image if you want, or you can use this one too!]
      cpu: 8  # 8 or less cpu for dummy build, 8 cpu for the final build, 8cpu highest for free accounts. Don't try to use more than 8cpu as free user, you may get blocked by ci.
      memory: 32G # So that we can have ram when needed, 32G highest. 4G per CPU you use.
    download_ccache_background_script: # To download ccache in background
      - ./download # Ccache download script
    sync_script: # To sync sources
      - ./sync # Source sync script
    monitor_background_script: # To monitor ccache and machine status every minute, runs in background
      - ./monitor # Monitor script
    build_script: # Actual build script foreground
      - ./build # Build script to run
    upload_final_script:
      - ./upload
